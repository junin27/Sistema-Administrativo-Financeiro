version: '3.8'

services:
  # Banco de dados PostgreSQL para produção
  postgres:
    image: postgres:15-alpine
    container_name: sistema_financeiro_db_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    networks:
      - sistema_financeiro_prod_network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend FastAPI para produção
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sistema_financeiro_backend_prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - DEBUG=false
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    volumes:
      - backend_logs:/app/logs
    networks:
      - sistema_financeiro_prod_network
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    command: ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend React para produção
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: sistema_financeiro_frontend_prod
    environment:
      - REACT_APP_API_URL=${FRONTEND_API_URL}
      - REACT_APP_ENV=production
    networks:
      - sistema_financeiro_prod_network
    restart: always
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: sistema_financeiro_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - sistema_financeiro_prod_network
    restart: always
    depends_on:
      - backend
      - frontend

volumes:
  postgres_prod_data:
    driver: local
  backend_logs:
    driver: local

networks:
  sistema_financeiro_prod_network:
    driver: bridge
